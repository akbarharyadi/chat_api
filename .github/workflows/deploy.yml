name: Deploy

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.vars.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute image name
        id: vars
        run: |
          IMAGE="${{ secrets.CHAT_API_IMAGE }}"
          if [ -z "$IMAGE" ]; then
            IMAGE="ghcr.io/$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')"
          fi
          IMAGE_BASE="${IMAGE%:*}"
          if [ -z "$IMAGE_BASE" ]; then
            IMAGE_BASE="$IMAGE"
          fi
          echo "image=${IMAGE_BASE}" >> "$GITHUB_OUTPUT"

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build image
        run: |
          docker build -t ${{ steps.vars.outputs.image }}:${{ github.sha }} -t ${{ steps.vars.outputs.image }}:latest .

      - name: Push image
        run: |
          docker push ${{ steps.vars.outputs.image }}:${{ github.sha }}
          docker push ${{ steps.vars.outputs.image }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Copy docker-compose.production.yml
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "docker-compose.production.yml"
          target: "/opt/chat-api"

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -euo pipefail
            IMAGE="${{ secrets.CHAT_API_IMAGE }}"
            if [ -z "$IMAGE" ]; then
              IMAGE="ghcr.io/$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')"
            fi
            IMAGE_BASE="${IMAGE%:*}"
            if [ -z "$IMAGE_BASE" ]; then
              IMAGE_BASE="$IMAGE"
            fi
            mkdir -p /opt/chat-api
            cd /opt/chat-api

            {
              printf '%s\n' "RAILS_ENV=production"
              printf '%s\n' "RAILS_MASTER_KEY=${{ secrets.RAILS_MASTER_KEY }}"
              printf '%s\n' "CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}"
              printf '%s\n' "POSTGRES_USER=${{ secrets.POSTGRES_USER }}"
              printf '%s\n' "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}"
              printf '%s\n' "POSTGRES_DB=${{ secrets.POSTGRES_DB }}"
              printf '%s\n' "POSTGRES_HOST=db"
              printf '%s\n' "POSTGRES_PORT=5432"
              printf '%s\n' "REDIS_URL=redis://redis:6379/1"
              printf '%s\n' "CHAT_API_IMAGE=${IMAGE_BASE}:latest"
            } > .env.production

            export CHAT_API_IMAGE="${IMAGE_BASE}:latest"

            docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" -p "${{ secrets.GHCR_TOKEN }}"
            docker compose -f docker-compose.production.yml pull
            docker compose -f docker-compose.production.yml up -d --remove-orphans
            docker compose -f docker-compose.production.yml run --rm web bundle exec rails db:migrate
